{"version":3,"sources":["components/hljs.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["hljs","registerLanguage","e","aliases","keywords","keyword","literal","contains","HASH_COMMENT_MODE","QUOTE_STRING_MODE","NUMBER_MODE","className","begin","end","excludeEnd","illegal","md","Markdown","html","xhtmlOut","langPrefix","linkify","typographer","highlight","str","lang","getLanguage","concat","utils","escapeHtml","value","__","fn","renderer","rules","fence","tokens","idx","options","env","slf","Index","state","markdown","handleChange","_ref","target","render","_this","setState","_this$state","this","react_default","a","createElement","onChange","dangerouslySetInnerHTML","__html","React","Component","App","src_components","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAGAA,IAAKC,iBAAiB,UAAW,SAAUC,GACzC,MAAO,CACLC,QAAS,CAAC,OACVC,SAAU,CACRC,QAAS,4GACTC,QAAS,mBAEXC,SAAU,CACRL,EAAEM,kBACFN,EAAEO,kBACFP,EAAEQ,YACF,CACEC,UAAW,OACXC,MAAO,mBACPC,IAAK,MACLC,YAAY,GAEd,CACEH,UAAW,UACXC,MAAO,mBACPC,IAAK,MACLC,YAAY,GAEd,CACEH,UAAW,WACXC,MAAO,MACPC,IAAK,MACLC,YAAY,GAEd,CACEH,UAAW,UACXC,MAAO,SACPC,IAAK,OAEP,CACEF,UAAW,OACXC,MAAO,IACPC,IAAK,MACLC,YAAY,IAGhBC,QAAS,mBAKEf,QAAf,EC3CMgB,UAAKC,IAAS,CAClBC,MAAM,EACNC,UAAU,EACVC,WAAY,QACZC,SAAS,EACTC,aAAa,EACbC,UAAW,SAACC,EAAKC,GACf,IAAIA,IAAQF,EAAUG,YAAYD,GAKhC,cAAAE,OAAgBX,EAAGY,MAAMC,WAAWL,GAApC,UAJA,IACE,0BAAAG,OAA4BF,EAA5B,MAAAE,OAAqCJ,EAAUA,UAAUE,EAAMD,GAAK,GAAMM,MAA1E,UACA,MAAOC,SAOTC,EAAKhB,EAAGiB,SAASC,MAAMC,MAE7BnB,EAAGiB,SAASC,MAAMC,MAAQ,SAACC,EAAQC,EAAKC,EAASC,EAAKC,GACpD,gCAAAb,OAAiCK,EAAGI,EAAQC,EAAKC,EAASC,EAAKC,GAA/D,eAqCaC,6MAhCbC,MAAQ,CACNZ,MAAO,4FACPa,SAAU,MAGZC,aAAe,SAAAC,GAAuB,IAAZf,EAAYe,EAArBC,OAAShB,MAClBa,EAAW3B,EAAG+B,OAAOjB,GAC3BkB,EAAKC,SAAS,CAACN,WAAUb,mFAGlB,IAAAoB,EACmBC,KAAKT,MAAxBZ,EADAoB,EACApB,MAAOa,EADPO,EACOP,SAEd,OACES,EAAAC,EAAAC,cAAA,OAAK3C,UAAU,aACbyC,EAAAC,EAAAC,cAAA,OAAK3C,UAAU,QACbyC,EAAAC,EAAAC,cAAA,YACExB,MAAOA,EACPyB,SAAUJ,KAAKP,gBAGnBQ,EAAAC,EAAAC,cAAA,OAAK3C,UAAU,6BACbyC,EAAAC,EAAAC,cAAA,OAAKE,wBAAyB,CAC5BC,OAAQd,cAxBAe,IAAMC,WCjBXC,mLAPX,OACER,EAAAC,EAAAC,cAACO,EAAD,aAHYF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpB,OAAOK,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.41703243.chunk.js","sourcesContent":["import hljs from 'highlight.js';\r\n\r\n\r\nhljs.registerLanguage(\"graphql\", function (e) {\r\n  return {\r\n    aliases: [\"gql\"],\r\n    keywords: {\r\n      keyword: \"query mutation subscription|10 type input schema directive interface union scalar fragment|10 enum on ...\",\r\n      literal: \"true false null\"\r\n    },\r\n    contains: [\r\n      e.HASH_COMMENT_MODE,\r\n      e.QUOTE_STRING_MODE,\r\n      e.NUMBER_MODE,\r\n      {\r\n        className: \"type\",\r\n        begin: \"[^\\\\w][A-Z][a-z]\",\r\n        end: \"\\\\W\",\r\n        excludeEnd: !0,\r\n      },\r\n      {\r\n        className: \"literal\",\r\n        begin: \"[^\\\\w][A-Z][A-Z]\",\r\n        end: \"\\\\W\",\r\n        excludeEnd: !0,\r\n      },\r\n      {\r\n        className: \"variable\",\r\n        begin: \"\\\\$\",\r\n        end: \"\\\\W\",\r\n        excludeEnd: !0,\r\n      },\r\n      {\r\n        className: \"keyword\",\r\n        begin: \"[.]{2}\",\r\n        end: \"\\\\.\",\r\n      },\r\n      {\r\n        className: \"meta\",\r\n        begin: \"@\",\r\n        end: \"\\\\W\",\r\n        excludeEnd: !0,\r\n      },\r\n    ],\r\n    illegal: /([;<']|BEGIN)/,\r\n  };\r\n});\r\n\r\n\r\nexport default hljs;\r\n","import React from 'react';\r\nimport Markdown from 'markdown-it';\r\nimport highlight from './hljs';\r\nimport './index.css';\r\n\r\n\r\nconst md = Markdown({\r\n  html: true,\r\n  xhtmlOut: true,\r\n  langPrefix: 'lang-',\r\n  linkify: true,\r\n  typographer: true,\r\n  highlight: (str, lang) => {\r\n    if (lang && highlight.getLanguage(lang))\r\n      try {\r\n        return (`<pre class=\"lang-${lang}\">${highlight.highlight(lang, str, true).value}</pre>`);\r\n      } catch (__) {}\r\n    else {\r\n      return (`<pre>${md.utils.escapeHtml(str)}</pre>`);\r\n    }\r\n  }\r\n});\r\n\r\nconst fn = md.renderer.rules.fence;\r\n\r\nmd.renderer.rules.fence = (tokens, idx, options, env, slf) => {\r\n  return `<div class=\"highlight\">${fn(tokens, idx, options, env, slf)}</div>`;\r\n};\r\n\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    value: 'Hello World\\n ===\\n ```js \\nconst foo = bar; \\nlet fn = () => { \\n// I am Good \\n}; \\n```',\r\n    markdown: '',\r\n  };\r\n\r\n  handleChange = ({target: {value}}) => {\r\n    const markdown = md.render(value);\r\n    this.setState({markdown, value});\r\n  };\r\n\r\n  render() {\r\n    const {value, markdown} = this.state;\r\n\r\n    return (\r\n      <div className='container'>\r\n        <div className='left'>\r\n          <textarea\r\n            value={value}\r\n            onChange={this.handleChange}>\r\n          </textarea>\r\n        </div>\r\n        <div className='right pg-markdown-preview'>\r\n          <div dangerouslySetInnerHTML={{\r\n            __html: markdown,\r\n          }}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Index;\r\n","import React, {Component} from 'react';\r\nimport Index from './components';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Index/>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}